// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: repo_sync_audit.sql

package database

import (
	"context"
	"database/sql"
)

const createRepoSyncAudit = `-- name: CreateRepoSyncAudit :one
INSERT INTO repository_sync_audit (id, repo_name, successful_sync_time, success, error_context)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id, repo_name, active, successful_sync_time, updated_at, created_at, success, error_context
`

type CreateRepoSyncAuditParams struct {
	ID                 string         `json:"id"`
	RepoName           string         `json:"repo_name"`
	SuccessfulSyncTime sql.NullTime   `json:"successful_sync_time"`
	Success            bool           `json:"success"`
	ErrorContext       sql.NullString `json:"error_context"`
}

func (q *Queries) CreateRepoSyncAudit(ctx context.Context, arg CreateRepoSyncAuditParams) (RepositorySyncAudit, error) {
	row := q.db.QueryRowContext(ctx, createRepoSyncAudit,
		arg.ID,
		arg.RepoName,
		arg.SuccessfulSyncTime,
		arg.Success,
		arg.ErrorContext,
	)
	var i RepositorySyncAudit
	err := row.Scan(
		&i.ID,
		&i.RepoName,
		&i.Active,
		&i.SuccessfulSyncTime,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Success,
		&i.ErrorContext,
	)
	return i, err
}

const deleteInactiveRepoSyncAudit = `-- name: DeleteInactiveRepoSyncAudit :one
DELETE FROM repository_sync_audit
WHERE id = ?1 AND active = FALSE
RETURNING id, repo_name, active, successful_sync_time, updated_at, created_at, success, error_context
`

func (q *Queries) DeleteInactiveRepoSyncAudit(ctx context.Context, id string) (RepositorySyncAudit, error) {
	row := q.db.QueryRowContext(ctx, deleteInactiveRepoSyncAudit, id)
	var i RepositorySyncAudit
	err := row.Scan(
		&i.ID,
		&i.RepoName,
		&i.Active,
		&i.SuccessfulSyncTime,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Success,
		&i.ErrorContext,
	)
	return i, err
}

const getRepoSyncAuditByID = `-- name: GetRepoSyncAuditByID :one
SELECT id, repo_name, active, successful_sync_time, updated_at, created_at, success, error_context
FROM repository_sync_audit
WHERE id = ?1
`

func (q *Queries) GetRepoSyncAuditByID(ctx context.Context, id string) (RepositorySyncAudit, error) {
	row := q.db.QueryRowContext(ctx, getRepoSyncAuditByID, id)
	var i RepositorySyncAudit
	err := row.Scan(
		&i.ID,
		&i.RepoName,
		&i.Active,
		&i.SuccessfulSyncTime,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Success,
		&i.ErrorContext,
	)
	return i, err
}

const listActiveRepoSyncAuditOrderBySuccessfulSyncTimeCreatedAt = `-- name: ListActiveRepoSyncAuditOrderBySuccessfulSyncTimeCreatedAt :many
SELECT id, repo_name, active, successful_sync_time, updated_at, created_at, success, error_context
FROM repository_sync_audit
WHERE active = TRUE
ORDER BY successful_sync_time ASC, created_at ASC
LIMIT ?2 OFFSET ?1
`

type ListActiveRepoSyncAuditOrderBySuccessfulSyncTimeCreatedAtParams struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

func (q *Queries) ListActiveRepoSyncAuditOrderBySuccessfulSyncTimeCreatedAt(ctx context.Context, arg ListActiveRepoSyncAuditOrderBySuccessfulSyncTimeCreatedAtParams) ([]RepositorySyncAudit, error) {
	rows, err := q.db.QueryContext(ctx, listActiveRepoSyncAuditOrderBySuccessfulSyncTimeCreatedAt, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RepositorySyncAudit
	for rows.Next() {
		var i RepositorySyncAudit
		if err := rows.Scan(
			&i.ID,
			&i.RepoName,
			&i.Active,
			&i.SuccessfulSyncTime,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Success,
			&i.ErrorContext,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRepoSyncAudit = `-- name: UpdateRepoSyncAudit :one
UPDATE repository_sync_audit
SET repo_name = ?1,
    successful_sync_time = ?2,
    success = ?3,
    error_context = ?4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?5
RETURNING id, repo_name, active, successful_sync_time, updated_at, created_at, success, error_context
`

type UpdateRepoSyncAuditParams struct {
	RepoName           string         `json:"repo_name"`
	SuccessfulSyncTime sql.NullTime   `json:"successful_sync_time"`
	Success            bool           `json:"success"`
	ErrorContext       sql.NullString `json:"error_context"`
	ID                 string         `json:"id"`
}

func (q *Queries) UpdateRepoSyncAudit(ctx context.Context, arg UpdateRepoSyncAuditParams) (RepositorySyncAudit, error) {
	row := q.db.QueryRowContext(ctx, updateRepoSyncAudit,
		arg.RepoName,
		arg.SuccessfulSyncTime,
		arg.Success,
		arg.ErrorContext,
		arg.ID,
	)
	var i RepositorySyncAudit
	err := row.Scan(
		&i.ID,
		&i.RepoName,
		&i.Active,
		&i.SuccessfulSyncTime,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Success,
		&i.ErrorContext,
	)
	return i, err
}

const updateRepoSyncAuditActiveStatus = `-- name: UpdateRepoSyncAuditActiveStatus :one
UPDATE repository_sync_audit
SET active = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?2
RETURNING id, repo_name, active, successful_sync_time, updated_at, created_at, success, error_context
`

type UpdateRepoSyncAuditActiveStatusParams struct {
	Active bool   `json:"active"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateRepoSyncAuditActiveStatus(ctx context.Context, arg UpdateRepoSyncAuditActiveStatusParams) (RepositorySyncAudit, error) {
	row := q.db.QueryRowContext(ctx, updateRepoSyncAuditActiveStatus, arg.Active, arg.ID)
	var i RepositorySyncAudit
	err := row.Scan(
		&i.ID,
		&i.RepoName,
		&i.Active,
		&i.SuccessfulSyncTime,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Success,
		&i.ErrorContext,
	)
	return i, err
}
